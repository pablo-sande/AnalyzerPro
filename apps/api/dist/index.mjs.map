{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import express, { Express } from 'express';\nimport cors from 'cors';\nimport { Redis } from 'ioredis';\nimport { v4 as uuidv4 } from 'uuid';\nimport { CodeAnalyzer } from '@code-analyzer-pro/core';\nimport type { AnalysisResult, FileAnalysis, FunctionMetrics } from '@code-analyzer-pro/core';\nimport { exec } from 'child_process';\nimport { promisify } from 'util';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport * as os from 'os';\n\nconst execAsync = promisify(exec);\nconst app: Express = express();\nconst port = process.env.PORT || 3000;\n\n// Redis configuration\nconst redis = new Redis({\n  host: process.env.REDIS_HOST || 'localhost',\n  port: parseInt(process.env.REDIS_PORT || '6379'),\n});\n\n// Middleware\napp.use(cors());\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ limit: '50mb', extended: true }));\n\n// Funci칩n para verificar el espacio disponible\nasync function checkDiskSpace(directory: string): Promise<{ free: number; total: number }> {\n  try {\n    const { stdout } = await execAsync(`df -k ${directory}`);\n    const lines = stdout.split('\\n');\n    const [, size, used, available] = lines[1].split(/\\s+/);\n    return {\n      free: parseInt(available) * 1024, // Convertir a bytes\n      total: parseInt(size) * 1024\n    };\n  } catch (error) {\n    console.error('Error checking disk space:', error);\n    throw new Error('Failed to check disk space');\n  }\n}\n\n// Funci칩n para limpiar directorios temporales antiguos\nasync function cleanupOldTempDirs() {\n  try {\n    const tempBase = path.join(os.tmpdir(), 'repo-');\n    const entries = await fs.readdir(os.tmpdir());\n    const oldDirs = entries.filter(entry => \n      entry.startsWith('repo-') && \n      path.join(os.tmpdir(), entry) !== tempBase\n    );\n\n    for (const dir of oldDirs) {\n      try {\n        await fs.rm(path.join(os.tmpdir(), dir), { recursive: true, force: true });\n      } catch (error) {\n        console.error(`Failed to remove old temp dir ${dir}:`, error);\n      }\n    }\n  } catch (error) {\n    console.error('Error cleaning up old temp dirs:', error);\n  }\n}\n\n// Helper function to aggregate all functions from all files\nfunction getAllFunctions(result: AnalysisResult) {\n  return result.files.flatMap((file: FileAnalysis) =>\n    (file.functions || []).map((func: FunctionMetrics) => ({\n      ...func,\n      location: {\n        file: file.path\n      },\n      size: (func as any).size ?? func.lines ?? 0\n    }))\n  );\n}\n\n// Helper function to clone and analyze a GitHub repository\nexport async function analyzeRepo(githubUrl: string): Promise<AnalysisResult> {\n  // Validate GitHub URL\n  if (!githubUrl.startsWith('https://github.com/')) {\n    throw new Error('Invalid GitHub repository URL');\n  }\n\n  // Create temporary directory\n  const tempDir = await fs.mkdtemp(path.join(os.tmpdir(), 'repo-'));\n  \n  try {\n    // Clone the repository\n    await execAsync(`git clone --single-branch ${githubUrl} ${tempDir}`);\n    \n    // Analyze the repository\n    const analyzer = new CodeAnalyzer();\n    const result = await analyzer.analyzeRepo(tempDir);\n    \n    return result;\n  } finally {\n    // Clean up: remove the temporary directory\n    try {\n      await fs.rm(tempDir, { recursive: true, force: true });\n    } catch (error) {\n      console.error('Error cleaning up temp directory:', error);\n    }\n  }\n}\n\n// Routes\napp.post('/upload', async (req, res) => {\n  try {\n    const analysisResult: AnalysisResult = req.body;\n    const id = uuidv4();\n\n    // Store in Redis with 1 hour TTL\n    await redis.setex(`analysis:${id}`, 3600, JSON.stringify(analysisResult));\n\n    res.json({ id });\n  } catch (error) {\n    console.error('Error storing analysis:', error);\n    res.status(500).json({ error: 'Failed to store analysis' });\n  }\n});\n\napp.get('/metrics/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const data = await redis.get(`analysis:${id}`);\n\n    if (!data) {\n      return res.status(404).json({ error: 'Analysis not found or expired' });\n    }\n\n    const analysis: AnalysisResult = JSON.parse(data);\n    res.json(analysis);\n  } catch (error) {\n    console.error('Error retrieving analysis:', error);\n    res.status(500).json({ error: 'Failed to retrieve analysis' });\n  }\n});\n\napp.get('/analyze', async (req, res) => {\n  try {\n    const { url, search, sortBy, sortOrder } = req.query;\n    if (!url) {\n      return res.status(400).json({ error: 'URL parameter is required' });\n    }\n    const cacheKey = `analysis:${url}`;\n    const cachedResult = await redis.get(cacheKey);\n    let result: AnalysisResult;\n    if (cachedResult) {\n      result = JSON.parse(cachedResult) as AnalysisResult;\n    } else {\n      result = await analyzeRepo(url as string);\n      await redis.set(cacheKey, JSON.stringify(result), 'EX', 3600);\n    }\n    // Aggregate all functions from all files\n    let allFunctions = getAllFunctions(result);\n    // Apply search filter if provided\n    if (search) {\n      const searchTerm = (search as string).toLowerCase();\n      allFunctions = allFunctions.filter(func =>\n        func.location.file.toLowerCase().includes(searchTerm) ||\n        func.name.toLowerCase().includes(searchTerm)\n      );\n    }\n    // Apply sorting if provided\n    if (sortBy) {\n      const order = sortOrder === 'desc' ? -1 : 1;\n      allFunctions.sort((a, b) => {\n        switch (sortBy) {\n          case 'size':\n            return ((a.size || a.lines || 0) - (b.size || b.lines || 0)) * order;\n          case 'complexity':\n            return ((a.complexity || 0) - (b.complexity || 0)) * order;\n          case 'fanIn':\n            return ((a.fanIn || 0) - (b.fanIn || 0)) * order;\n          case 'fanOut':\n            return ((a.fanOut || 0) - (b.fanOut || 0)) * order;\n          case 'name':\n            return a.name.localeCompare(b.name) * order;\n          case 'file':\n            return a.location.file.localeCompare(b.location.file) * order;\n          default:\n            return 0;\n        }\n      });\n    }\n    res.json({\n      ...result,\n      functions: allFunctions\n    });\n  } catch (error) {\n    console.error('Error analyzing repository:', error);\n    res.status(500).json({ error: 'Failed to analyze repository' });\n  }\n});\n\n// Endpoint para an치lisis detallado de un archivo\napp.get('/analyze/file', async (req, res) => {\n  const { url, path: filePath } = req.query;\n\n  if (!url || !filePath) {\n    return res.status(400).json({ error: 'URL and path are required' });\n  }\n\n  try {\n    // Intentar obtener el an치lisis desde Redis\n    const cacheKey = `analysis:${url}`;\n    const cachedResult = await redis.get(cacheKey);\n    \n    if (!cachedResult) {\n      return res.status(404).json({ error: 'Analysis not found. Please analyze the repository first.' });\n    }\n\n    const analysis = JSON.parse(cachedResult) as AnalysisResult;\n    // Find the file\n    const fileAnalysis = analysis.files.find((f: FileAnalysis) => f.path === filePath);\n\n    if (!fileAnalysis) {\n      return res.status(404).json({ error: 'File not found in analysis' });\n    }\n\n    // Return all functions in the file\n    res.json({\n      ...fileAnalysis,\n      functions: fileAnalysis.functions\n    });\n  } catch (error) {\n    console.error('Error analyzing file:', error);\n    res.status(500).json({ error: 'Failed to analyze file' });\n  }\n});\n\napp.post('/cache/clear', async (req, res) => {\n  try {\n    // Obtener todas las claves que empiezan con 'analysis:'\n    const keys = await redis.keys('analysis:*');\n    \n    if (keys.length === 0) {\n      return res.json({ message: 'No cached analysis found' });\n    }\n\n    // Eliminar todas las claves encontradas\n    await redis.del(...keys);\n    \n    res.json({ \n      message: 'Cache cleared successfully',\n      clearedKeys: keys.length\n    });\n  } catch (error) {\n    console.error('Error clearing cache:', error);\n    res.status(500).json({ error: 'Failed to clear cache' });\n  }\n});\n\n// Start the server only if this file is being run directly\nif (import.meta.url === `file://${process.argv[1]}`) {\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\n}\n\nexport { app };\nexport { execAsync }; "],"mappings":"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","names":[]}