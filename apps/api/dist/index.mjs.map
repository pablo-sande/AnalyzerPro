{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import express from 'express';\r\nimport cors from 'cors';\r\nimport { Redis } from 'ioredis';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { CodeAnalyzer } from '@code-analyzer-pro/core';\r\nimport type { AnalysisResult, FileAnalysis, FunctionMetrics } from '@code-analyzer-pro/core';\r\nimport { exec } from 'child_process';\r\nimport { promisify } from 'util';\r\nimport * as fs from 'fs/promises';\r\nimport * as path from 'path';\r\nimport * as os from 'os';\r\n\r\nconst execAsync = promisify(exec);\r\nconst app = express();\r\nconst port = process.env.PORT || 3000;\r\n\r\n// Redis configuration\r\nconst redis = new Redis({\r\n  host: process.env.REDIS_HOST || 'localhost',\r\n  port: parseInt(process.env.REDIS_PORT || '6379'),\r\n});\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\n// Función para verificar el espacio disponible\r\nasync function checkDiskSpace(directory: string): Promise<{ free: number; total: number }> {\r\n  try {\r\n    const { stdout } = await execAsync(`df -k ${directory}`);\r\n    const lines = stdout.split('\\n');\r\n    const [, size, used, available] = lines[1].split(/\\s+/);\r\n    return {\r\n      free: parseInt(available) * 1024, // Convertir a bytes\r\n      total: parseInt(size) * 1024\r\n    };\r\n  } catch (error) {\r\n    console.error('Error checking disk space:', error);\r\n    throw new Error('Failed to check disk space');\r\n  }\r\n}\r\n\r\n// Función para limpiar directorios temporales antiguos\r\nasync function cleanupOldTempDirs() {\r\n  try {\r\n    const tempBase = path.join(os.tmpdir(), 'repo-');\r\n    const entries = await fs.readdir(os.tmpdir());\r\n    const oldDirs = entries.filter(entry => \r\n      entry.startsWith('repo-') && \r\n      path.join(os.tmpdir(), entry) !== tempBase\r\n    );\r\n\r\n    for (const dir of oldDirs) {\r\n      try {\r\n        await fs.rm(path.join(os.tmpdir(), dir), { recursive: true, force: true });\r\n      } catch (error) {\r\n        console.error(`Failed to remove old temp dir ${dir}:`, error);\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Error cleaning up old temp dirs:', error);\r\n  }\r\n}\r\n\r\n// Helper function to aggregate all functions from all files\r\nfunction getAllFunctions(result: AnalysisResult) {\r\n  return result.files.flatMap((file: FileAnalysis) =>\r\n    (file.functions || []).map((func: FunctionMetrics) => ({\r\n      ...func,\r\n      location: {\r\n        file: file.path\r\n      },\r\n      size: (func as any).size ?? func.lines ?? 0\r\n    }))\r\n  );\r\n}\r\n\r\n// Helper function to clone and analyze a GitHub repository\r\nasync function analyzeRepo(githubUrl: string): Promise<AnalysisResult> {\r\n  // Validate GitHub URL\r\n  if (!githubUrl.startsWith('https://github.com/')) {\r\n    throw new Error('Invalid GitHub repository URL');\r\n  }\r\n\r\n  // Create temporary directory\r\n  const tempDir = await fs.mkdtemp(path.join(os.tmpdir(), 'repo-'));\r\n  \r\n  try {\r\n    // Clone the repository\r\n    await execAsync(`git clone --single-branch ${githubUrl} ${tempDir}`);\r\n    \r\n    // Analyze the repository\r\n    const analyzer = new CodeAnalyzer();\r\n    const result = await analyzer.analyzeRepo(tempDir);\r\n    \r\n    return result;\r\n  } finally {\r\n    // Clean up: remove the temporary directory\r\n    try {\r\n      await fs.rm(tempDir, { recursive: true, force: true });\r\n    } catch (error) {\r\n      console.error('Error cleaning up temp directory:', error);\r\n    }\r\n  }\r\n}\r\n\r\n// Routes\r\napp.post('/upload', async (req, res) => {\r\n  try {\r\n    const analysisResult: AnalysisResult = req.body;\r\n    const id = uuidv4();\r\n\r\n    // Store in Redis with 1 hour TTL\r\n    await redis.setex(`analysis:${id}`, 3600, JSON.stringify(analysisResult));\r\n\r\n    res.json({ id });\r\n  } catch (error) {\r\n    console.error('Error storing analysis:', error);\r\n    res.status(500).json({ error: 'Failed to store analysis' });\r\n  }\r\n});\r\n\r\napp.get('/metrics/:id', async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const data = await redis.get(`analysis:${id}`);\r\n\r\n    if (!data) {\r\n      return res.status(404).json({ error: 'Analysis not found or expired' });\r\n    }\r\n\r\n    const analysis: AnalysisResult = JSON.parse(data);\r\n    res.json(analysis);\r\n  } catch (error) {\r\n    console.error('Error retrieving analysis:', error);\r\n    res.status(500).json({ error: 'Failed to retrieve analysis' });\r\n  }\r\n});\r\n\r\napp.get('/analyze', async (req, res) => {\r\n  try {\r\n    const { url, search, sortBy, sortOrder } = req.query;\r\n    if (!url) {\r\n      return res.status(400).json({ error: 'URL parameter is required' });\r\n    }\r\n    const cacheKey = `analysis:${url}`;\r\n    const cachedResult = await redis.get(cacheKey);\r\n    let result: AnalysisResult;\r\n    if (cachedResult) {\r\n      result = JSON.parse(cachedResult) as AnalysisResult;\r\n    } else {\r\n      result = await analyzeRepo(url as string);\r\n      await redis.set(cacheKey, JSON.stringify(result), 'EX', 3600);\r\n    }\r\n    // Aggregate all functions from all files\r\n    let allFunctions = getAllFunctions(result);\r\n    // Apply search filter if provided\r\n    if (search) {\r\n      const searchTerm = (search as string).toLowerCase();\r\n      allFunctions = allFunctions.filter(func =>\r\n        func.location.file.toLowerCase().includes(searchTerm) ||\r\n        func.name.toLowerCase().includes(searchTerm)\r\n      );\r\n    }\r\n    // Apply sorting if provided\r\n    if (sortBy) {\r\n      const order = sortOrder === 'desc' ? -1 : 1;\r\n      allFunctions.sort((a, b) => {\r\n        switch (sortBy) {\r\n          case 'size':\r\n            return ((a.size || a.lines || 0) - (b.size || b.lines || 0)) * order;\r\n          case 'complexity':\r\n            return ((a.complexity || 0) - (b.complexity || 0)) * order;\r\n          case 'fanIn':\r\n            return ((a.fanIn || 0) - (b.fanIn || 0)) * order;\r\n          case 'fanOut':\r\n            return ((a.fanOut || 0) - (b.fanOut || 0)) * order;\r\n          case 'name':\r\n            return a.name.localeCompare(b.name) * order;\r\n          case 'file':\r\n            return a.location.file.localeCompare(b.location.file) * order;\r\n          default:\r\n            return 0;\r\n        }\r\n      });\r\n    }\r\n    res.json({\r\n      ...result,\r\n      functions: allFunctions\r\n    });\r\n  } catch (error) {\r\n    console.error('Error analyzing repository:', error);\r\n    res.status(500).json({ error: 'Failed to analyze repository' });\r\n  }\r\n});\r\n\r\n// Endpoint para análisis detallado de un archivo\r\napp.get('/analyze/file', async (req, res) => {\r\n  const { url, path: filePath } = req.query;\r\n\r\n  if (!url || !filePath) {\r\n    return res.status(400).json({ error: 'URL and path are required' });\r\n  }\r\n\r\n  try {\r\n    // Intentar obtener el análisis desde Redis\r\n    const cacheKey = `analysis:${url}`;\r\n    const cachedResult = await redis.get(cacheKey);\r\n    \r\n    if (!cachedResult) {\r\n      return res.status(404).json({ error: 'Analysis not found. Please analyze the repository first.' });\r\n    }\r\n\r\n    const analysis = JSON.parse(cachedResult) as AnalysisResult;\r\n    // Find the file\r\n    const fileAnalysis = analysis.files.find((f: FileAnalysis) => f.path === filePath);\r\n\r\n    if (!fileAnalysis) {\r\n      return res.status(404).json({ error: 'File not found in analysis' });\r\n    }\r\n\r\n    // Return all functions in the file\r\n    res.json({\r\n      ...fileAnalysis,\r\n      functions: fileAnalysis.functions\r\n    });\r\n  } catch (error) {\r\n    console.error('Error analyzing file:', error);\r\n    res.status(500).json({ error: 'Failed to analyze file' });\r\n  }\r\n});\r\n\r\napp.post('/cache/clear', async (req, res) => {\r\n  try {\r\n    // Obtener todas las claves que empiezan con 'analysis:'\r\n    const keys = await redis.keys('analysis:*');\r\n    \r\n    if (keys.length === 0) {\r\n      return res.json({ message: 'No cached analysis found' });\r\n    }\r\n\r\n    // Eliminar todas las claves encontradas\r\n    await redis.del(...keys);\r\n    \r\n    res.json({ \r\n      message: 'Cache cleared successfully',\r\n      clearedKeys: keys.length\r\n    });\r\n  } catch (error) {\r\n    console.error('Error clearing cache:', error);\r\n    res.status(500).json({ error: 'Failed to clear cache' });\r\n  }\r\n});\r\n\r\n// Start server\r\napp.listen(port, () => {\r\n  console.log(`🚀 API server running at http://localhost:${port}`);\r\n}); "],"mappings":";AAAA,OAAO,aAAa;AACpB,OAAO,UAAU;AACjB,SAAS,aAAa;AACtB,SAAS,MAAM,cAAc;AAC7B,SAAS,oBAAoB;AAE7B,SAAS,YAAY;AACrB,SAAS,iBAAiB;AAC1B,YAAY,QAAQ;AACpB,YAAY,UAAU;AACtB,YAAY,QAAQ;AAEpB,IAAM,YAAY,UAAU,IAAI;AAChC,IAAM,MAAM,QAAQ;AACpB,IAAM,OAAO,QAAQ,IAAI,QAAQ;AAGjC,IAAM,QAAQ,IAAI,MAAM;AAAA,EACtB,MAAM,QAAQ,IAAI,cAAc;AAAA,EAChC,MAAM,SAAS,QAAQ,IAAI,cAAc,MAAM;AACjD,CAAC;AAGD,IAAI,IAAI,KAAK,CAAC;AACd,IAAI,IAAI,QAAQ,KAAK,CAAC;AAyCtB,SAAS,gBAAgB,QAAwB;AAC/C,SAAO,OAAO,MAAM;AAAA,IAAQ,CAAC,UAC1B,KAAK,aAAa,CAAC,GAAG,IAAI,CAAC,UAA2B;AAAA,MACrD,GAAG;AAAA,MACH,UAAU;AAAA,QACR,MAAM,KAAK;AAAA,MACb;AAAA,MACA,MAAO,KAAa,QAAQ,KAAK,SAAS;AAAA,IAC5C,EAAE;AAAA,EACJ;AACF;AAGA,eAAe,YAAY,WAA4C;AAErE,MAAI,CAAC,UAAU,WAAW,qBAAqB,GAAG;AAChD,UAAM,IAAI,MAAM,+BAA+B;AAAA,EACjD;AAGA,QAAM,UAAU,MAAS,WAAa,UAAQ,UAAO,GAAG,OAAO,CAAC;AAEhE,MAAI;AAEF,UAAM,UAAU,6BAA6B,SAAS,IAAI,OAAO,EAAE;AAGnE,UAAM,WAAW,IAAI,aAAa;AAClC,UAAM,SAAS,MAAM,SAAS,YAAY,OAAO;AAEjD,WAAO;AAAA,EACT,UAAE;AAEA,QAAI;AACF,YAAS,MAAG,SAAS,EAAE,WAAW,MAAM,OAAO,KAAK,CAAC;AAAA,IACvD,SAAS,OAAO;AACd,cAAQ,MAAM,qCAAqC,KAAK;AAAA,IAC1D;AAAA,EACF;AACF;AAGA,IAAI,KAAK,WAAW,OAAO,KAAK,QAAQ;AACtC,MAAI;AACF,UAAM,iBAAiC,IAAI;AAC3C,UAAM,KAAK,OAAO;AAGlB,UAAM,MAAM,MAAM,YAAY,EAAE,IAAI,MAAM,KAAK,UAAU,cAAc,CAAC;AAExE,QAAI,KAAK,EAAE,GAAG,CAAC;AAAA,EACjB,SAAS,OAAO;AACd,YAAQ,MAAM,2BAA2B,KAAK;AAC9C,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,2BAA2B,CAAC;AAAA,EAC5D;AACF,CAAC;AAED,IAAI,IAAI,gBAAgB,OAAO,KAAK,QAAQ;AAC1C,MAAI;AACF,UAAM,EAAE,GAAG,IAAI,IAAI;AACnB,UAAM,OAAO,MAAM,MAAM,IAAI,YAAY,EAAE,EAAE;AAE7C,QAAI,CAAC,MAAM;AACT,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,gCAAgC,CAAC;AAAA,IACxE;AAEA,UAAM,WAA2B,KAAK,MAAM,IAAI;AAChD,QAAI,KAAK,QAAQ;AAAA,EACnB,SAAS,OAAO;AACd,YAAQ,MAAM,8BAA8B,KAAK;AACjD,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,8BAA8B,CAAC;AAAA,EAC/D;AACF,CAAC;AAED,IAAI,IAAI,YAAY,OAAO,KAAK,QAAQ;AACtC,MAAI;AACF,UAAM,EAAE,KAAK,QAAQ,QAAQ,UAAU,IAAI,IAAI;AAC/C,QAAI,CAAC,KAAK;AACR,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,4BAA4B,CAAC;AAAA,IACpE;AACA,UAAM,WAAW,YAAY,GAAG;AAChC,UAAM,eAAe,MAAM,MAAM,IAAI,QAAQ;AAC7C,QAAI;AACJ,QAAI,cAAc;AAChB,eAAS,KAAK,MAAM,YAAY;AAAA,IAClC,OAAO;AACL,eAAS,MAAM,YAAY,GAAa;AACxC,YAAM,MAAM,IAAI,UAAU,KAAK,UAAU,MAAM,GAAG,MAAM,IAAI;AAAA,IAC9D;AAEA,QAAI,eAAe,gBAAgB,MAAM;AAEzC,QAAI,QAAQ;AACV,YAAM,aAAc,OAAkB,YAAY;AAClD,qBAAe,aAAa;AAAA,QAAO,UACjC,KAAK,SAAS,KAAK,YAAY,EAAE,SAAS,UAAU,KACpD,KAAK,KAAK,YAAY,EAAE,SAAS,UAAU;AAAA,MAC7C;AAAA,IACF;AAEA,QAAI,QAAQ;AACV,YAAM,QAAQ,cAAc,SAAS,KAAK;AAC1C,mBAAa,KAAK,CAAC,GAAG,MAAM;AAC1B,gBAAQ,QAAQ;AAAA,UACd,KAAK;AACH,qBAAS,EAAE,QAAQ,EAAE,SAAS,MAAM,EAAE,QAAQ,EAAE,SAAS,MAAM;AAAA,UACjE,KAAK;AACH,qBAAS,EAAE,cAAc,MAAM,EAAE,cAAc,MAAM;AAAA,UACvD,KAAK;AACH,qBAAS,EAAE,SAAS,MAAM,EAAE,SAAS,MAAM;AAAA,UAC7C,KAAK;AACH,qBAAS,EAAE,UAAU,MAAM,EAAE,UAAU,MAAM;AAAA,UAC/C,KAAK;AACH,mBAAO,EAAE,KAAK,cAAc,EAAE,IAAI,IAAI;AAAA,UACxC,KAAK;AACH,mBAAO,EAAE,SAAS,KAAK,cAAc,EAAE,SAAS,IAAI,IAAI;AAAA,UAC1D;AACE,mBAAO;AAAA,QACX;AAAA,MACF,CAAC;AAAA,IACH;AACA,QAAI,KAAK;AAAA,MACP,GAAG;AAAA,MACH,WAAW;AAAA,IACb,CAAC;AAAA,EACH,SAAS,OAAO;AACd,YAAQ,MAAM,+BAA+B,KAAK;AAClD,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,+BAA+B,CAAC;AAAA,EAChE;AACF,CAAC;AAGD,IAAI,IAAI,iBAAiB,OAAO,KAAK,QAAQ;AAC3C,QAAM,EAAE,KAAK,MAAM,SAAS,IAAI,IAAI;AAEpC,MAAI,CAAC,OAAO,CAAC,UAAU;AACrB,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,4BAA4B,CAAC;AAAA,EACpE;AAEA,MAAI;AAEF,UAAM,WAAW,YAAY,GAAG;AAChC,UAAM,eAAe,MAAM,MAAM,IAAI,QAAQ;AAE7C,QAAI,CAAC,cAAc;AACjB,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,2DAA2D,CAAC;AAAA,IACnG;AAEA,UAAM,WAAW,KAAK,MAAM,YAAY;AAExC,UAAM,eAAe,SAAS,MAAM,KAAK,CAAC,MAAoB,EAAE,SAAS,QAAQ;AAEjF,QAAI,CAAC,cAAc;AACjB,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,6BAA6B,CAAC;AAAA,IACrE;AAGA,QAAI,KAAK;AAAA,MACP,GAAG;AAAA,MACH,WAAW,aAAa;AAAA,IAC1B,CAAC;AAAA,EACH,SAAS,OAAO;AACd,YAAQ,MAAM,yBAAyB,KAAK;AAC5C,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,yBAAyB,CAAC;AAAA,EAC1D;AACF,CAAC;AAED,IAAI,KAAK,gBAAgB,OAAO,KAAK,QAAQ;AAC3C,MAAI;AAEF,UAAM,OAAO,MAAM,MAAM,KAAK,YAAY;AAE1C,QAAI,KAAK,WAAW,GAAG;AACrB,aAAO,IAAI,KAAK,EAAE,SAAS,2BAA2B,CAAC;AAAA,IACzD;AAGA,UAAM,MAAM,IAAI,GAAG,IAAI;AAEvB,QAAI,KAAK;AAAA,MACP,SAAS;AAAA,MACT,aAAa,KAAK;AAAA,IACpB,CAAC;AAAA,EACH,SAAS,OAAO;AACd,YAAQ,MAAM,yBAAyB,KAAK;AAC5C,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,wBAAwB,CAAC;AAAA,EACzD;AACF,CAAC;AAGD,IAAI,OAAO,MAAM,MAAM;AACrB,UAAQ,IAAI,oDAA6C,IAAI,EAAE;AACjE,CAAC;","names":[]}